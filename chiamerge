#!/bin/bash
#
# Name:         chiamerge
# Author:       efnats
# Purpose:      mass handling of disk drives in preparation for PoST crypto farming
#               actions explained below
#
################################################################################################################

###################################
#      Configuration       #
###################################

DEBUGLEVEL=1

EXT4OPTIONS="-F -m 0 -T largefile4"
XFSOPTIONS="-f -b size=1024"
NTFSOPTIONS="-f"
PARTITION=1
SERIALNRPREFIX="CHIA"

LOGFILE="./chiamerge.log"

###################################
#        F U N C T I O N S        #
###################################

help()
{
	USAGE="$(basename "$0") [--option]...  argument..."
	echo ${USAGE}
	cat <<END		

Syntax:	chiamerge.sh  [--option]...  arguments...

		- options are actions to be performed
		- arguments are disknames

Options:	

		--help			    (show this help text)
		--ext4 			    (sets filesystem type to ext4)
		--xfs 			    (sets filesystem type to xfs)
		--ntfs			    (sets filesystem type to ntfs)
		--wipe			    (wipes all data from drive)
        --format 		    (formats using the filesystem type given as argument to the script)
		--label			    (formats using the filesystem type given as argument to the script)
		--write-sn		    (creates an empty file named after Serialnr of drive in folder "serial")
		--chia-init-disk 	(same as: --wipe --format --label --write-sn)
        --mount-disk	    (mounts disk(s))
		--unmount-disk	    (unmounts disk(s))
		
# If no option is given, help is shown and the script exits.

Arguments:    one or more disknames (eg: sda sdb-sdd)

At least one argument (diskname) is to be given to the script.

For --format and --label, FSTYPE also to be given (one of: --xfs, --ext4, --ntfs)

Usage 1: 	chiamerge <diskname>...	
Example:	chiamerge sda
		    chiamerge sda-sdd
		    chiamerge sda sdd-sdf sdj

Usage 2:	chiamerge <action> <diskname> <disknamerange> ... (in any order)
Example:	chiamerge --wipe sda sdc-sdg sdh
  		    chiamerge --wipe sda sdb --format sdc
	    	chiamerge --ext4 --chia-init-disk
END

	echo "> END: ${TIMESTAMP}-------------------------------------------------------" >> ${LOGFILE}

	exit
}

wipe()
{
	for i in "$@"
	do
        	DEVICE=/dev/${i}
		
		# If the device is already mounted, don't perform any destructive action on it
		#lsblk -n ${DEVICE} -l -o mountpoint | grep ${i} && echo "Disk ${DEVICE}'1' is mounted on ${MOUNTPOINT} - ignoring disk."; continue
	
		# Wipe the Disk
		echo -ne wiping...'\t''\t''\t' "${i} "
		
		case ${DEBUGLEVEL} in
			0) wipefs -a ${DEVICE} >  /dev/null  2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) wipefs -a ${DEVICE} >> ${LOGFILE} 2>&1 
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac

		
	done
}

format()
{
	for i in "$@"
	do
		DEVICE=/dev/${i}

		# If the device is already mounted, don't perform any destructive action on it
		#lsblk -n ${DEVICE} -l -o mountpoint | grep ${i} && echo "Disk ${DEVICE}'1' is mounted on ${MOUNTPOINT} - ignoring disk."; continue

		# Partition the Disk
		echo -ne creating partition...'\t''\t' "${i} "

		case ${DEBUGLEVEL} in
			0) echo -e "g\nn\n1\n\n\nw" | fdisk ${DEVICE} >  /dev/null  2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) echo -e "g\nn\n1\n\n\nw" | fdisk ${DEVICE} >> ${LOGFILE} 2>&1 
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac

		
		# Create filesystem for large files, no reserved space
		echo -n -ne creating $FSTYPE filesystem...'\t' "${i} "

		case ${FSTYPE} in
			ext4) FSOPTIONS=${EXT4OPTIONS};;
			xfs)  FSOPTIONS=${XFSOPTIONS};;
			ntfs) FSOPTIONS=${NTFSOPTIONS};;
			*)    ;;
		esac

		case ${DEBUGLEVEL} in
			0) mkfs.${FSTYPE} ${FSOPTIONS} ${DEVICE}${PARTITION} >  /dev/null  2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) mkfs.${FSTYPE} ${FSOPTIONS} ${DEVICE}${PARTITION} >> ${LOGFILE} 2>&1 
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac

		echo ""
	done
}

label()
{
	for i in "$@"
	do
        	DEVICE=/dev/${i}

		# Get serial number of disk
		LONGSERIALNR=$(smartctl -i ${DEVICE}${PARTITION} | grep -i "Serial Number" | awk  '{ print $3 }')
		COUNTSN=$(echo -n "$LONGSERIALNR" | wc -c)
		COUNTSERIALNRPREFIX=$(echo -n $SERIALNRPREFIX} | wc -c)
		SUMSERIAL=$((COUNTSN+COUNTSERIALNRPREFIX))

		XFSMAXLABEL=11
		XFSTARGETREMOVE=$((SUMSERIAL-XFSMAXLABEL))
		XFSSERIALNR=$(smartctl -i ${DEVICE} | grep -i "Serial Number" | awk  '{ print $3 }' | awk '{ print substr ($0, '$XFSTARGETREMOVE') }')

		EXT4MAXLABEL=15
		EXT4TARGETREMOVE=$((SUMSERIAL-EXT4MAXLABEL))
		EXT4SERIALNR=$(smartctl -i ${DEVICE} | grep -i "Serial Number" | awk  '{ print $3 }' | awk '{ print substr ($0, '$EXT4TARGETREMOVE') }')

		NTFSMAXLABEL=31
		NTFSTARGETREMOVE=$((SUMSERIAL-NTFSMAXLABEL))
		NTFSSERIALNR=$(smartctl -i ${DEVICE} | grep -i "Serial Number" | awk  '{ print $3 }' | awk '{ print substr ($0, '$NTFSTARGETREMOVE') }')

		#umount ${DEVICE}
		
		# Label the partition
		case ${FSTYPE} in
			ext4) echo -ne labelling ${SERIALNRPREFIX}-${EXT4SERIALNR}...'\t' "${i} ";;
			xfs)  echo -ne labelling ${SERIALNRPREFIX}-${XFSSERIALNR}...'\t' "${i} ";;
			ntfs) echo -ne labelling ${SERIALNRPREFIX}-${NTFSSERIALNR}...'\t' "${i} ";;
			*)    ;;
		esac

		case ${FSTYPE} in
			ext4) LABEL=$(tune2fs -L ${SERIALNRPREFIX}-${EXT4SERIALNR} ${DEVICE}${PARTITION});;
			xfs)  LABEL=$(xfs_admin -L ${SERIALNRPREFIX}-${XFSSERIALNR} ${DEVICE}${PARTITION});;
			ntfs) LABEL=$(ntfslabel ${DEVICE}${PARTITION} ${SERIALNRPREFIX}-${NTFSSERIALNR});;
			*)    ;;
		esac

		case ${DEBUGLEVEL} in
			0) echo $LABEL >  /dev/null   2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) echo $LABEL >> ${LOGFILE}  2>&1 
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac
		
	done
}

write-sn()
{
	for i in "$@"
	do
        DEVICE=/dev/${i}
		MOUNTPOINT=/media/chiamerge

		# Get serial number of disk
		SERIALNR=$(smartctl -i ${DEVICE} | grep -i "Serial Number" | awk  '{ print $3 }')

		# Write serial number
		echo -ne creating file $SERIALNR in ${i}${PARTITION}/serial/'\t'

		mkdir -p ${MOUNTPOINT}/${i}${PARTITION}
		mount ${DEVICE}${PARTITION} ${MOUNTPOINT}/${i}${PARTITION}

		case ${DEBUGLEVEL} in
			0) mkdir -p ${MOUNTPOINT}/${i}${PARTITION}/serial && touch ${MOUNTPOINT}/${i}${PARTITION}/serial/${SERIALNR} >  /dev/null  2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) mkdir -p ${MOUNTPOINT}/${i}${PARTITION}/serial && touch ${MOUNTPOINT}/${i}${PARTITION}/serial/${SERIALNR} >> ${LOGFILE} 2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac

		umount ${MOUNTPOINT}/${i}${PARTITION}
		rm -r ${MOUNTPOINT}/${i}${PARTITION}
		
	done
}

## How to detect unmounted disks
## lsblk --noheadings --raw -o NAME,MOUNTPOINT | awk '$1~/[[:digit:]]/ && $2 == ""' 

mount-disk()
{
	for i in "$@"
	do
        	DEVICE=/dev/${i}
		MOUNTPOINT=/media/${SERIALNRPREFIX}

		# Mount drive
		echo -ne Mounting disk...'\t' "${i} "

#		mkdir -p ${MOUNTPOINT}/${i}${PARTITION} &&	mount ${DEVICE}${PARTITION}${MOUNTPOINT}/${i}${PARTITION}

		case ${DEBUGLEVEL} in
			0) mkdir -p ${MOUNTPOINT}/${i}${PARTITION} &&	mount ${DEVICE}${PARTITION} ${MOUNTPOINT}/${i}${PARTITION} >  /dev/null  2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) mkdir -p ${MOUNTPOINT}/${i}${PARTITION} &&	mount ${DEVICE}${PARTITION} ${MOUNTPOINT}/${i}${PARTITION} >> ${LOGFILE} 2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac

		
	done
}

umount-disk()
{
	for i in "$@"
	do
        	DEVICE=/dev/${i}
		MOUNTPOINT=/media/${SERIALNRPREFIX}

		# Unmount drive
		echo -ne Unmounting disk...'\t' "${i} "

		case ${DEBUGLEVEL} in
			0) umount ${MOUNTPOINT}/${i}${PARTITION} && rm -r ${MOUNTPOINT}/${i}${PARTITION} >  /dev/null  2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;

			1) umount ${MOUNTPOINT}/${i}${PARTITION} && rm -r ${MOUNTPOINT}/${i}${PARTITION} >> ${LOGFILE} 2>&1
			   test $? -eq 0 && echo -e "${GREEN}OK${NOCOLOR}" || echo -e "${RED}ERROR${NOCOLOR}";;
		esac

		
	done
}

warningmesg()
{
	ACTIONS="$1"
	DEVICEOPTIONSLIST="$2"

	echo "Welcome to chiamerge V(${VERSION})"
	echo ""
	echo "You have chosen to perform the following actions: ${BOLD}${ACTIONS}${NORM}"
	echo "on disks: ${BOLD}${DEVICEOPTIONSLIST}${NORM}"

	grep -wqe "format\|wipe" <<< ${ACTIONS} && echo -e "\n${RED}WARNING!!\n\nThis is going to IRREVERSIBLY DESTROY all data on ${NOCOLOR}${BOLD}${DEVICEOPTIONSLIST}${NORM}\n"

	read -p "Do you really want to do that? (y/n): " ANS
	echo  ""

	if [[ ${ANS} == [nN] ]] 
	then
		case ${DEBUGLEVEL} in
			0) exit 1;;

			1) echo "> END: ${TIMESTAMP} ---------------------------------------------------------" >> ${LOGFILE}
			   exit 1;;
		esac
	fi
}


###################################
#      M A I N    L O G I C       #
###################################

# Variables
VERSION="0.88"
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
#SERIALNR=$(hdparm -I ${DEVICE} | awk '/Serial Number/ { print $3 }')
#SERIALNR=$(smartctl -i ${DEVICE} | grep -i "Serial Number" | awk  '{ print $3 }')

RED="\033[1;31m"
GREEN="\033[1;32m"
NOCOLOR="\033[0m"
NORM=`tput sgr0`
BOLD=`tput bold`
REV=`tput smso`

WORDOPTIONSLIST=""
DEVICEOPTIONSLIST=""
FSTYPE=""

# Send output and error to log file
if [[ ${DEBUGLEVEL} -eq 1 ]]
then
	exec > >(tee -a ${LOGFILE})
	exec 2>&1
fi

echo ""											    >> ${LOGFILE}
echo "------------------------------------------------------------------------------------" >> ${LOGFILE}
echo "BEGIN: ${BOLD}${TIMESTAMP}${NORM}"						    >> ${LOGFILE}
echo "------------------------------------------------------------------------------------" >> ${LOGFILE}

# Process all the arguments given to the script
for i in "$@"
do
	# Get the first two characters of the option
	FIRSTTWOCHAR=$(echo $i | cut -c1-2)

	# It is a word option if the first two characters are hyphens
	if [[ ${FIRSTTWOCHAR} == "--" ]]
	then
		REMAININGWORDOPTION=$(echo "${i:2}")
		WORDOPTIONSLIST="${WORDOPTIONSLIST} ${REMAININGWORDOPTION}"

	# If not, then look for hyphen in the option. If it exists, it is a device range option
	elif [[ $i =~ "-" ]]
	then
		# Extract first and last device names
		FIRSTDEVICE=$(echo $i | cut -d'-' -f1)
		LASTDEVICE=$(echo $i | cut -d'-' -f2)

		# Calculate their lengths
		LENFIRSTDEVICE=$(echo ${#FIRSTDEVICE})
		LENLASTDEVICE=$(echo ${#LASTDEVICE})

		# Find the device prefix from first device
		DEVPREFIX=$(echo ${FIRSTDEVICE%?})

		# Find the difference in length between both devices
		LENDIFF=$((LENLASTDEVICE - LENFIRSTDEVICE))

		#echo FIRSTDEVICE is $FIRSTDEVICE
		#echo LASTDEVICE is $LASTDEVICE
		#echo DEVPREFIX is $DEVPREFIX
		#echo LENDIFF is $LENDIFF

		case ${LENDIFF} in
			0) FIRSTLTR3=$(echo "${FIRSTDEVICE: -1}")
			   LASTLTR3=$(echo "${LASTDEVICE: -1}")
			   #echo "In 0. FIRSTLTR is $FIRSTLTR  LASTLTR is $LASTLTR."
			   EXPANDEDLIST=$(eval echo ${DEVPREFIX}{$FIRSTLTR3..$LASTLTR3});;

			1) FIRSTLTR3=$(echo "${FIRSTDEVICE: -1}")
			   LASTLTR4=$(echo "${LASTDEVICE: -1}")
			   LASTLTR3=$(echo "${LASTDEVICE: -2}" | cut -c1)
			   NUMLASTLTR3=$(printf "%d\n" \'$LASTLTR3)
			   let NUMLASTLTR3=$NUMLASTLTR3-1
			   LASTLTR3PREV=$(printf "\x$(printf %x $NUMLASTLTR3)")

			   #echo "In 1. FIRSTLTR3 is $FIRSTLTR3  LASTLTR4 is $LASTLTR4 LASTLTR3 is $LASTLTR3."
			   LIST1=$(eval echo ${DEVPREFIX}{$FIRSTLTR3..z})
			   LIST2=$(eval echo ${DEVPREFIX}{a..$LASTLTR3PREV}{a..z})
			   LIST3=$(eval echo ${DEVPREFIX}$LASTLTR3$LASTLTR4)
			   EXPANDEDLIST=$(echo $LIST1 $LIST2 $LIST3);;
	        esac

		DEVICEOPTIONSLIST="${DEVICEOPTIONSLIST} ${EXPANDEDLIST}"

	# Else, consider it as a single device option
	else
		DEVICEOPTIONSLIST="${DEVICEOPTIONSLIST} ${i}"
	fi
done

DEVICEOPTIONSLIST=$(echo ${DEVICEOPTIONSLIST} | xargs)
WORDOPTIONSLIST=$(echo ${WORDOPTIONSLIST} | xargs)

# If option given is --help or one of the options given is --help
if grep -wqe "help" <<< ${WORDOPTIONSLIST}
then
		ACTIONS="help"
		echo "Welcome to chiamerge V(${VERSION})"
		echo ""
		help

# If no disk(s) given
elif [[ -z ${DEVICEOPTIONSLIST} ]]
then
	# and no word options given, default to --help optiion.
	if [[ -z ${WORDOPTIONSLIST} ]] || [[ ${WORDOPTIONSLIST} == "help" ]]
	then
		ACTIONS="help"
		echo "Welcome to chiamerge V(${VERSION})"
		echo ""
	fi

# If disk(s) given and action given is: chia-init-disk
elif grep -wqe "chia-init-disk" <<< ${WORDOPTIONSLIST}
then

 	ACTIONS="wipe format label write-sn"
    warningmesg "${ACTIONS}" "${DEVICEOPTIONSLIST}"

	if grep -wqe "xfs|ext4|ntfs" <<< ${WORDOPTIONSLIST}
	then
		echo "Filesystem type missing. Specify using --ext4|--xfs|--ntfs" 
		exit
	fi


# Else, run the specified action on all the devices given as arguments
else
	ACTIONS="${WORDOPTIONSLIST}"
	warningmesg "${ACTIONS}" "${DEVICEOPTIONSLIST}"
fi

# Ensure FSTYPE option is specified also if --format or --label options are given
if [[ "${ACTIONS}" == *"format"* ]] || [[ "${ACTIONS}" == *"label"* ]]
then
	grep -wqe "xfs"  <<< ${WORDOPTIONSLIST} && FSTYPE="xfs"
	grep -wqe "ext4" <<< ${WORDOPTIONSLIST} && FSTYPE="ext4"
	grep -wqe "ntfs" <<< ${WORDOPTIONSLIST} && FSTYPE="ntfs"

	# and exit the script if not
	if [[ -z "${FSTYPE}" ]] 
	then
		echo "Filesystem type missing. Specify using --ext4|--xfs|--ntfs" 
		exit
	fi
fi

for ACTION in ${ACTIONS}
do
	case ${ACTION} in
		help)			help;;

		ext4) 			echo -e		"${BOLD}\nFilesystem type: EXT4${NORM}";;

		xfs) 			echo -e		"${BOLD}\nFilesystem type: XFS${NORM}";;
	
		ntfs) 			echo -e		"${BOLD}\nFilesystem type: NTFS${NORM}";;

		wipe) 			echo -e		"${BOLD}\nWipe${NORM}"
					wipe    	${DEVICEOPTIONSLIST};;

		format) 		echo -e		"${BOLD}\nFormat${NORM}"
					format  	${DEVICEOPTIONSLIST};;

		label)			echo -e		"${BOLD}\nLabel${NORM}"
					label   	${DEVICEOPTIONSLIST};;

		write-sn)		echo -e		"${BOLD}\nWrite serialfile${NORM}"
					write-sn   	${DEVICEOPTIONSLIST};;

		mount-disk)		echo -e		"${BOLD}\nMount disk${NORM}"
					mount-disk   	${DEVICEOPTIONSLIST};;

		umount-disk)		echo -e		"${BOLD}\nUnmount disk${NORM}"
		    		umount-disk   	${DEVICEOPTIONSLIST};;


		*)			echo    	"Invalid action specified";;
	esac
done


TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

echo -e "\n\n> END: ${TIMESTAMP} ----------------------------------------------------------------" >> ${LOGFILE}
#
#END#
################################################################################################################
